(* ::Package:: *)

(**********************************************************)
(*                                                        *)
(*  Model for Chiral perturbation Theory at lowest order  *)
(*  Follows Scherer's conventions                         *)
(*                                                        *)
(**********************************************************)

(*
TODO:
-NOTE: earlier versions of FeynRules have a bug where del[..., m] will not work correctly unless Expand is called on its argument or the argument's head is Plus or Minus.
-NOTE: vertices with more than two mesons will be dropped below to speed up model file generation.
-Put in widths!
*)

M$ModelName = "ChiPT";

M$Information = {
    Authors -> {"Adam Coogan", "Logan Morrison"},
    Date->"2/13/2018",
    Institutions -> {"UC Santa Cruz"},
    Emails -> {"acoogan@ucsc.edu", "loanmorr@ucsc.edu"},
    Version -> 1
};

(***** Gauge group information *****)
FeynmanGauge = True;

M$GaugeGroups = {
    U1EM == {
        Abelian -> True,
        CouplingConstant -> qe,
        GaugeBoson -> A,
        Charge -> Q
    }
};

(***** Parameter list. ALL UNITS ARE IN GeV! *****)
M$Parameters = {
    fpi == {
        ParameterType -> External,
        Value -> 0.093,
        TeX -> ComposedChar["f", "\\pi"],
        Description->"pion decay constant"
    },

    b0 == {
        ParameterType -> External,
        Description -> "mass term coefficient",
        TeX -> ComposedChar["B", "0"],
        Value -> 2.617 (* ((mpi0 + mpi)/2)^2 / (mu + md) *)
    },

    fv == {
        ParameterType -> External,
        Description -> "vector coupling F_V",
        TeX -> ComposedChar["F", "V"],
        Value -> 0.165 (* MeV *)
    },

    gv == {
        ParameterType -> External,
        Description -> "vector coupling G_V",
        TeX -> ComposedChar["G", "V"],
        Value -> 0.055 (* MeV *)
    },

    muq == {
        ParameterType -> External,
        Value -> 0.0024,
        TeX -> ComposedChar["m", "u"],
        Description->"mass of the up quark"
    },

    mdq == {
        ParameterType -> External,
        Value -> 0.0048,
        TeX -> ComposedChar["m", "d"],
        Description->"mass of the down quark"
    },

    msq == {
        ParameterType -> External,
        Value -> 0.095,
        TeX -> ComposedChar["m", "s"],
        Description->"mass of the strange quark"
    },

    alphaEM == {
        ParameterType -> External,
        Value -> 1/137.0,
        TeX -> ComposedChar["\\alpha", "EM"],
        Description -> "fine structure constant for EM"
    },

    vh == {
        ParameterType -> External,
        TeX -> ComposedChar["v", "H"],
        Description -> "Higgs vev",
        Value -> 246.0
    },

    mrho == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "\\rho"],
        Description->"rho0 mass"
    },

    rhowidth == {
        ParameterType -> External,
        TeX -> ComposedChar["\\Gamma", "\\rho"],
        Description->"rho0 width"
    },

    Vud == {
        ParameterType -> External,
        Value -> 0.974267,
        TeX -> ComposedChar["V", "ud"],
        Description -> "ud element of CKM matrix"
    },

    Vus == {
        ParameterType -> External,
        Value -> 0.225369,
        TeX -> ComposedChar["V", "us"],
        Description -> "us element of CKM matrix"
    },

    GF == {
        ParameterType -> External,
        Value -> 1.166 * 10^(-5), (* GeV^-2 *)
        TeX -> ComposedChar["G", "F"],
        Description -> "Fermi constant"
    },

    qe == {
        ParameterType -> Internal,
        Value -> Sqrt[4 Pi alphaEM],
        TeX -> "e",
        Description -> "electric coupling constant"
    }
};

(***** Particle classes list ******)
M$ClassesDescription = {
    (* Neutral Pion *)
    S[1] == {
        ClassName -> pi0,
        SelfConjugate -> True,
        Mass -> {mpi0, 0.13498},
        Width -> 0,
        ParticleName -> "pi0",
        TeXParticleName -> ComposedChar["\\pi", Null, "0"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "0"]
    },

    (* Charged Pion *)
    S[2] == {
        ClassName -> pim,
        SelfConjugate -> False,
        Mass -> {mpi, 0.13957},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "pim",
        AntiParticleName -> "pip",
        TeXParticleName -> ComposedChar["\\pi", Null, "-"],
        TeXAntiParticleName -> ComposedChar["\\pi", Null, "+"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "-"],
        PropagatorArrow -> Forward
    },

    (* Neutral Kaon *)
    S[3] == {
        ClassName -> k0,
        SelfConjugate -> False,
        Mass -> {mk0, 0.49765},
        Width -> 0,
        ParticleName -> "k0",
        AntiParticleName -> "k0~",
        TeXParticleName -> ComposedChar["K", Null, "0"],
        TeXAntiParticleName -> ComposedChar["K", Null, "0", "\\bar"],
        PropagatorLabel -> ComposedChar["K", Null, "0"],
        PropagatorArrow -> Forward
    },

    (* Charged Kaon *)
    S[4] == {
        ClassName -> km,
        SelfConjugate -> False,
        Mass -> {mk, 0.49367},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "km",
        AntiParticleName -> "kp",
        TeXParticleName -> ComposedChar["K", Null, "-"],
        TeXAntiParticleName -> ComposedChar["K", Null, "+"],
        PropagatorLabel -> ComposedChar["K", Null, "-"],
        PropagatorArrow -> Forward
    },

    (* Eta *)
    S[5] == {
        ClassName -> eta,
        SelfConjugate -> True,
        Mass -> {meta, 0.547862},
        Width -> 0,
        ParticleName -> "eta",
        TeXParticleName -> "\\eta",
        PropagatorLabel -> "\\eta"
    },

    (* Photon *)
    V[1] == {
        ClassName -> A,
        SelfConjugate -> True,
        Mass -> 0,
        Width -> 0,
        ParticleName -> "A",
        TeXParticleName -> "\\Gamma"
    },

    (* Rho *)
    V[2] == {
        ClassName -> rho,
        SelfConjugate -> True,
        Mass -> mrho,
        Width -> rhowidth,
        ParticleName -> "\\rho",
        PropagatorLabel -> "\\rho"
    }
}

(***** Gauge parameters for FeynArts *****)
GaugeXi[V[1]] = GaugeXi[A];

(* Need both of these terms to use the pip and kp field names *)
(* Note that FeynRules automatically creates the k0bar conjugate field *)
pip = anti[pim];
pipbar = pim;
kp = anti[km];
kpbar = km;

(* Mass matrix of the light quarks *)
QuarkMassMatrix = DiagonalMatrix[{muq, mdq, msq}];
(* Matrix of quark charges *)
QuarkChargeMatrix = DiagonalMatrix[{2/3, -1/3, -1/3}];
(* Matrix containing CKM terms for 4-Fermi Lagrangian *)
CKMPlus = {{0, Vud, Vus}, {0, 0, 0}, {0, 0, 0}};

(*** Set up building blocks for the Lagrangian ***)
(* Matrix of mesons *)

phiMat = {{pi0 + eta / Sqrt[3], Sqrt[2] * pip, Sqrt[2] * kp},
        {Sqrt[2] * pim, -pi0 + eta / Sqrt[3], Sqrt[2] * k0},
        {Sqrt[2] * km, Sqrt[2] * k0bar, -2 * eta / Sqrt[3]}};

(* Golstone Matrix *)
Sigma[order_] := Module[{coeff},
    coeff[n_] := (1 / Factorial[n]) * (I / fpi)^n;
    (* If order is 0, return Identity. Else, do sum up to order. *)
    If[order == 0, IdentityMatrix[3],
    IdentityMatrix[3] + Sum[coeff[n] * MatrixPower[phiMat, n], {n, 1, order}]]
];

(* Square Root of the Golstone Matrix *)
SqrtSigma[order_] := Module[{coeff},
    coeff[n_] := (1 / Factorial[n]) * (I / fpi)^n;
    (* If order is 0, return Identity. Else, do sum up to order. *)
    If[order == 0, IdentityMatrix[3],
    IdentityMatrix[3] + Sum[coeff[n] * MatrixPower[phiMat / 2, n], {n, 1, order}]]
];

Sigma4 = Sigma[4];
Sigma6 = Sigma[6];
SqrtSigma4 = SqrtSigma[4];
SqrtSigmaDag4 = HC[SqrtSigma[4]];

(* Define left and right handed vector fields *)
EMCurrentL[m_] := qe * QuarkChargeMatrix * A[m];
EMCurrentR[m_] := qe * QuarkChargeMatrix * A[m];

lh[m_] := EMCurrentL[m];
rh[m_] := EMCurrentR[m];

vmu[m_] := 1 / 2 * (EMCurrentR[m] + EMCurrentL[m]);
amu[m_] := 1 / 2 * (EMCurrentR[m] - EMCurrentL[m]);

(* Define covariant derivative of Sigma matrix *)
dc[sf_, m_] := del[sf, m] - I * rh[m] . sf + I * sf . lh[m];
hcdc[sf_, m_] := HC[dc[sf, m]];

(*** Lagrangian ***)

(* Mesons Kinetic Term *)

LKinetic := Module[{m, kinetic},
    kinetic = fpi^2 / 4 * Tr[dc[Sigma6, m] . hcdc[Sigma6, m]];
    Series[kinetic, {fpi, Infinity, 4}] // Normal
];

(* Mesons Mass Term *)
LMassMes = b0 * fpi^2 / 2 * Tr[QuarkMassMatrix . Sigma6 + QuarkMassMatrix . HC[Sigma6]];

(* Photon kinetic term *)
LGauge := Module[{m, n},
    -1 / 4 * FS[A, m, n] FS[A, m, n]
];


(*** Resonance Lagrangian ***)

(* Connection to define Resonance Covariant Derivative *)
ResConnection[m_] := 1 / 2 * (SqrtSigmaDag4 . del[SqrtSigma4, m] + SqrtSigma4. del[SqrtSigmaDag4, m]) - I / 2 * (SqrtSigmaDag4 . vmu[m] . SqrtSigma4 + SqrtSigma4. vmu[m] . SqrtSigmaDag4) // Series[#, {fpi, Infinity, 4}] &//Normal;

(* Resonance matrix *)
ResonanceMatrix[m_] := rho[m] / Sqrt[2] * DiagonalMatrix[{1, -1, 0}];
commutator[a_, b_] := a.b - b.a;
FSConnection[m_, n_] := commutator[ResConnection[m], ResonanceMatrix[n]];

(* Resonance Field Strength *)
ResonanceFS[m_, n_] := Module[{FSTerm, connectTerm, connectTerm2},
    FSTerm = del[ResonanceMatrix[n], m] - del[ResonanceMatrix[m], n];
    connectTerm = FSConnection[m, n] - FSConnection[n, m];
    Series[FSTerm + connectTerm, {fpi, Infinity, 4}] // Normal
];

(* Free part of the rho Lagrangian *)
LRho := Module[{m, n, kinetic, mass},
    kinetic = -1 / 4 * Tr[ResonanceFS[m, n] . ResonanceFS[m, n]];
    mass = mrho^2 / 2 * Tr[ResonanceMatrix[m] . ResonanceMatrix[m]];
    kinetic + mass;
    Series[kinetic + mass, {fpi, Infinity, 4}] // Normal
];

(* Octet electromagnetic tensor current *)
FSRight[m_, n_] = qe * QuarkChargeMatrix * FS[A, m, n];
FSLeft[m_, n_] = qe * QuarkChargeMatrix * FS[A, m, n];

FSOctetLeft[m_, n_] := SqrtSigma4 . FSLeft[m, n] . SqrtSigmaDag4;
FSOctetRight[m_, n_] := SqrtSigmaDag4 . FSRight[m, n] . SqrtSigma4;
FSOctetPlus[m_, n_] := FSOctetLeft[m, n] + FSOctetRight[m, n];
FSOctetMinus[m_, n_] := FSOctetLeft[m, n] - FSOctetRight[m, n];

(* Resonance interactions with Electromagnetic FS *)
LRhoIntFS := Module[{m, n, coupling, TrTerm},
    coupling = -fv / (2 * Sqrt[2]);
    TrTerm = Tr[ResonanceFS[m, n] . FSOctetPlus[m, n]] / mrho;
    Series[coupling * TrTerm, {fpi, Infinity, 4}] // Normal
];

(* Octet meson current *)
SqrtSigmaMu[m_] := I * SqrtSigmaDag4 . dc[Sigma4, m] . SqrtSigmaDag4;

(* Resonance interactions with meson currects *)
LRhoIntMes := Module[{m, n, coupling, TrTerm},
    coupling = -I * gv / Sqrt[2];
    TrTerm = Tr[ResonanceFS[m, n] . SqrtSigmaMu[m] . SqrtSigmaMu[n]] / mrho;
    Series[coupling * TrTerm, {fpi, Infinity, 4}] // Normal
];


(* Full Lagrangian *)
L := LKinetic + LMassMes + LGauge + LRho + LRhoIntFS + LRhoIntMes;
